plugins
{
    id 'maven-publish'
    id 'fabric-loom' version '1.11.7'
    id 'babric-loom-extension' version '1.10.2'
}

java
{
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom
{
    if (project.hasProperty("accesswidener_name") && project.accesswidener_name.length() > 0)
    {
        accessWidenerPath = file("src/main/resources/${project.accesswidener_name}.accesswidener")
    }
    mixin
    {
        useLegacyMixinAp = false
    }
}

repositories
{
    maven { url = uri("${projectDir}/maven") }
    mavenCentral()
}

dependencies
{
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings("org:mcp:${project.mcp_mappings}")
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    implementation "org.slf4j:slf4j-api:1.8.0-beta4"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2"
}

processResources
{
    inputs.property "version", project.version

    filesMatching("fabric.mod.json")
    {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach
{
    it.options.release = 17
}

tasks.withType(GenerateModuleMetadata).configureEach
{
    enabled = false
}

tasks.withType(Test).configureEach
{
    failOnNoDiscoveredTests = false
}

jar
{
    from("LICENSE")
    {
        rename { "${it}_" + base.archivesName.get() }
    }
}

publishing
{
    repositories
    {
        mavenLocal()
    }

    publications
    {
        create("mavenJava", MavenPublication)
        {
            artifactId = base.archivesName.get()
            from components.java
        }
    }
}